from .routers import operaciones_router, router_plot, router_grapevines, router_vineyard ,router_inventory, router_users,router_tasklist,router_winery
from fastapi import FastAPI
from contextlib import asynccontextmanager
from .authentification import auth
from .database import engine, Base
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import os

@asynccontextmanager
async def lifespan(app: FastAPI):
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    yield

app = FastAPI(lifespan=lifespan)

# CORS din치mico para desarrollo y producci칩n
def get_cors_origins():
    """Configurar CORS seg칰n el entorno"""
    origins = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://127.0.0.1",
    ]
    
    # Agregar dominio de Heroku en producci칩n
    heroku_url = os.getenv("APP_URL")
    if heroku_url:
        # Permite el dominio principal y subdominios de Heroku
        origins.append(f"https://{heroku_url}.herokuapp.com")
        origins.append(f"https://{heroku_url}-*.herokuapp.com")
        
        # Para el caso espec칤fico que est치s viendo
        origins.append("https://odiseapp-bf4d8516bab4.herokuapp.com")

    return origins

# 游눠 Mueve el middleware de CORS aqu칤, antes de cualquier router
app.add_middleware(
    CORSMiddleware,
    allow_origins=get_cors_origins(),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Ahora incluye tus routers
app.include_router(router_winery.router, prefix="/winery", tags=["winery"])
app.include_router(router_inventory.router, prefix="/inventory", tags=["inventory"])
app.include_router(router_tasklist.router, prefix="/task", tags=["task"])
app.include_router(router_users.router, prefix="/users", tags=["users"])
app.include_router(auth.router,prefix="/auth", tags=["auth"])
app.include_router(router_plot.router, prefix="/plots", tags=["plots"])
app.include_router(router_grapevines.router, prefix="/grapevines", tags=["grapevines"])
app.include_router(router_vineyard.router, prefix="/vineyard", tags=["vineyard"])
app.include_router(operaciones_router.router, prefix="/operaciones", tags=["operaciones"])


# Servir frontend est치tico
frontend_path = os.path.join(os.path.dirname(__file__), "../frontend/build")

# Solo montar archivos est치ticos si el directorio existe (en producci칩n)
if os.path.exists(frontend_path):
    app.mount("/static", StaticFiles(directory=os.path.join(frontend_path, "static")), name="static")
    
    @app.get("/app/{full_path:path}")
    async def serve_react_app(full_path: str):
        """Servir aplicaci칩n React solo para rutas que empiecen con /app/"""
        index_file = os.path.join(frontend_path, "index.html")
        return FileResponse(index_file)

    @app.get("/")
    def read_root():
        return FileResponse(os.path.join(frontend_path, "index.html"))
else:
    # En desarrollo local, solo API
    @app.get("/")
    def read_root():
        return {"message": "ODISEApp API - Desarrollo"}

# Health check para Heroku
@app.get("/health")
def health_check():
    return {"status": "healthy"}