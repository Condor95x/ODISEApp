from .routers import operaciones_router, router_plot, router_grapevines, router_vineyard ,router_inventory, router_users,router_tasklist,router_winery, router_bot
from fastapi import FastAPI
from contextlib import asynccontextmanager
from .authentification import auth
from .database import engine, Base
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import os


@asynccontextmanager
async def lifespan(app: FastAPI):
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    yield

app = FastAPI(lifespan=lifespan)

# CORS din치mico para desarrollo y producci칩n
def get_cors_origins():
    """Configurar CORS seg칰n el entorno"""
    origins = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://127.0.0.1",
    ]
    
    # Agregar dominio de Heroku en producci칩n
    heroku_app_url = os.getenv("APP_URL")
    if heroku_app_url:
        # A침ade la URL del backend con el prefijo HTTPS si no lo tiene
        if not heroku_app_url.startswith("https://"):
            origins.append(f"https://{heroku_app_url}")
        else:
            origins.append(heroku_app_url)
    
    # Agrega la URL espec칤fica del frontend que est치 causando el error
    frontend_origin = "https://odiseapp-bf4d8516bab4.herokuapp.com"
    if frontend_origin not in origins:
        origins.append(frontend_origin)

    return origins

# 游눠 Mueve el middleware de CORS aqu칤, antes de cualquier router
app.add_middleware(
    CORSMiddleware,
    allow_origins=get_cors_origins(),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Ahora incluye tus routers
app.include_router(router_bot.router, tags=["bot"])
app.include_router(router_winery.router, prefix="/winery", tags=["winery"])
app.include_router(router_inventory.router, prefix="/inventory", tags=["inventory"])
app.include_router(router_tasklist.router, prefix="/task", tags=["task"])
app.include_router(router_users.router, prefix="/users", tags=["users"])
app.include_router(auth.router,prefix="/auth", tags=["auth"])
app.include_router(router_plot.router, prefix="/plots", tags=["plots"])
app.include_router(router_grapevines.router, prefix="/grapevines", tags=["grapevines"])
app.include_router(router_vineyard.router, prefix="/vineyard", tags=["vineyard"])
app.include_router(operaciones_router.router, prefix="/operaciones", tags=["operaciones"])

# Servir frontend est치tico
# Ajustar el path para que funcione tanto en desarrollo como en producci칩n
frontend_path = "frontend/build"  # Path relativo desde la ra칤z del proyecto

# Solo montar archivos est치ticos si el directorio existe (en producci칩n)
if os.path.exists(frontend_path):
    app.mount("/static", StaticFiles(directory=os.path.join(frontend_path, "static")), name="static")
    
    # Servir archivos de assets (CSS, JS, im치genes, etc.)
    @app.get("/static/{full_path:path}")
    async def serve_static_files(full_path: str):
        """Servir archivos est치ticos del build de React"""
        file_path = os.path.join(frontend_path, "static", full_path)
        if os.path.exists(file_path):
            return FileResponse(file_path)
        return {"error": "File not found"}
    
    # Servir manifest.json, favicon.ico, etc.
    @app.get("/{filename:path}")
    async def serve_root_assets(filename: str):
        """Servir archivos en la ra칤z como manifest.json, favicon.ico, etc."""
        # Lista de archivos permitidos en la ra칤z
        allowed_files = [
            "manifest.json", "favicon.ico", "robots.txt", "logo192.png", 
            "logo512.png", "asset-manifest.json"
        ]
        
        if filename in allowed_files:
            file_path = os.path.join(frontend_path, filename)
            if os.path.exists(file_path):
                return FileResponse(file_path)
        
        # Para todas las dem치s rutas (SPA routing), servir index.html
        index_file = os.path.join(frontend_path, "index.html")
        if os.path.exists(index_file):
            return FileResponse(index_file)
        
        return {"error": "Frontend not built"}

    @app.get("/")
    def read_root():
        """Servir la aplicaci칩n React en la ra칤z"""
        index_file = os.path.join(frontend_path, "index.html")
        return FileResponse(index_file)
else:
    # En desarrollo local, solo API
    @app.get("/")
    def read_root():
        return {"message": "ODISEApp API - Desarrollo"}

@app.get("/{full_path:path}")
async def spa_catch_all(full_path: str):
    index_file = os.path.join(frontend_path, "index.html")
    if os.path.exists(index_file):
        return FileResponse(index_file)
    return {"error": "Frontend not built"}

# Health check para Heroku
@app.get("/health")
def health_check():
    return {"status": "healthy"}
